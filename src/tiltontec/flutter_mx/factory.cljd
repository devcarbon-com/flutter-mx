(ns tiltontec.flutter-mx.factory
  (:require [clojure.string :as str]
            ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Expanded Column State StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.util.base :refer [dprn dp dpx]]
            [tiltontec.util.core
             :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.cell.base :refer [mx-type unbound  cinfo Model PObserver observe md-ref?] :as cty]
            [tiltontec.cell.integrity :as integrity]

            [tiltontec.cell.core :as cell :refer [cF cF+ cI cF_]]
            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]
            [clojure.string :as str]))

(defn record-fx$state [me state]
  (dpx :recording-state (tiltontec.cell.base/minfo me) cty/*defer-changes* cty/*within-integrity*)
  (integrity/with-cc :reco-state
    (md/mset! me :fx$state state)))

(defn fx-state-nearest [me]
  (dpx :state-nearest-entry (tiltontec.cell.base/minfo me))
  (when me
    (or ^State? (mget me :fx$state)
      ;; todo without dependency? Complete rethink?
      (when-let [st (fx-state-nearest (md/mpar))]
        (dpx :got-nearest-st-JIT st (tiltontec.cell.base/minfo me))
        ;; todo memoize instead
        ;; (md/mset! me :fx$state st)                            ;; for next time
        st))))

;;; --- make fx ------------------------------------------
;; todo have not-to-be call not-to-be on these non-kid leaves

(defn make-fx [mx-type fx-props custom-props cFkids-form]
  (dpx :make-fx!!!!!!! mx-type)
  (apply tiltontec.model.core/make
    :mx-type mx-type
    :fx$state (cI nil)
    ;; todo move next to meta
    :fx$ikeys (remove #{:fx-class :fx-gen :name :key}
                (concat (keys fx-props) (keys custom-props)))
    :kids cFkids-form
    (concat
      (vec (apply concat (seq fx-props)))
      (vec (apply concat (seq custom-props))))))

(defn state-set
  ([^State state]
   (state-set state nil))
  ([^State state me]
   (if (.-mounted state)
     (do (dp :state-set>setting-state state (cty/minfo me))
         (.setState state (fn [] (do))))
     (dp :state-set>NOT_SETTING_STATE_NOT_MOUNTED state (cty/minfo me)))))

#_
(defn state-set-all
  "Try just going up....nope"
  [me]
  (when-let [^State state (mget me :fx$state)]
    (state-set state me))
  (when-let [par (:parent @me)]
    (state-set-all par)))

(defn state-set-down [me]
  (when-let [^State state (mget me :fx$state)]
    (state-set state me))
  (doseq [k (md-kids me)]
    (when (md-ref? k)
      (state-set-down k))))

(defn state-set-all
  "Go up to root then do full tree"
  ;; todo scan properties for widgets
  [me]
  (if-let [par (:parent @me)]
    (state-set-all par)
    (state-set-down me)))

(deftype FXDartWidget []
  :extends Model
  PObserver
  (observe [this slot me new-value prior-value cell]
    (when-not (some #{slot} [:parent :name :mx-type :not-to-be :initState :fx-class :cells-flushed
                             :fx$state :fx$ikeys :fx$notifier :fx$observer])
      (when-not (= prior-value cty/unbound)
        (dpx :FXDartWidget-observing!!! slot new-value prior-value (tiltontec.cell.base/minfo me) (cinfo cell))
        (dpx :FXDartWidget-observing-md!!! slot (tiltontec.cell.base/minfo me) #_#_ :deref @me)
        (dpx :FXDartWidget-observing-cell!!! slot (cinfo cell) @cell)
        (when-let [noter (mget me :fx$notifier)]
          (.notifyListeners ^m/ChangeNotifier noter))

        (if-let [^State state (mget me :fx$state)]
          (do (dpx :FXDWO-settingimmediatestate slot new-value #_(meta me)  (cty/minfo me) (.-mounted state))
              (state-set state me))
          (if-let [^State state (fx-state-nearest me)]
            (do
              (dpx :FXDWO-obs-FXD-uses-nearest-state state (.-mounted state)
                :slot slot :new-prio new-value prior-value)
              (state-set state me))
            (dpx :FXDWO-NOT-setting-state-on-utterly-stateless slot new-value (cty/minfo me)
              #_ @me)))))))

;;; --- the maker macros ---------------------------------------------------

(defmacro make-fx-snackbar [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (~fx-class #_m/SnackBar
                                     ~@(let [kvs (for [[k# _#] fx-props]
                                                   [(symbol (str "." (name k#)))
                                                    `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                       (tiltontec.model.core/mget me ~k#))])]
                                         (apply concat kvs)))
                     ^#/(w/State ~fx-class #_m/SnackBar)
                     (~'createState [_#]
                       (reify :extends #/(w/State #_ ~fx-class m/SnackBar)
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.model.core/mget me :initState)]
                             (init this me)))
                         (~'build [_# ctx]
                           (~fx-class                     ;; /SnackBar
                             ~@(let [kvs (for [[k# _#] fx-props]
                                           [(symbol (str "." (name k#)))
                                            `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                               (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       nil)))

(defmacro k1-child-stateful [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         ^:mixin m/SingleTickerProviderStateMixin ;; todo make optional
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.model.core/mget me :initState)]
                             ;; this is where widgets can build controllers who vsync
                             (init this me)))
                         (~'build [_# ctx]
                           (let [k1# (tiltontec.flutter-mx.core/fx-resolve :kid1 me ctx
                                       (first (tiltontec.model.core/md-kids me)))]
                             (~fx-class
                               .child k1#
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#)))
                                              `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                 (tiltontec.model.core/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-child-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     .child (tiltontec.flutter-mx.core/fx-resolve :kid1 me ctx
                              (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                       (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-content-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     .content (tiltontec.flutter-mx.core/fx-resolve :kid1 me ctx
                                (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                       (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro children-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     .children (mapv (partial tiltontec.flutter-mx.core/fx-render ctx) (md/md-kids me))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.model.core/mget me ~k#)])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro childless-stateless [fx-class fx-props mx-props]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                       (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       nil)))

(defmacro k1-param1-stateless [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class (tiltontec.flutter-mx.core/fx-render ctx (first (tiltontec.model.core/md-kids me)))
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                       (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-param1-stateful [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))

                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (mget me :initState)]
                             (dp :calling-initstate-of (tiltontec.cell.base/minfo me))
                             (init this me)))
                         ;-- BEGIN NEW CODE -------------------
                         ; (~'debugFillProperties [this# props-builder#]
                         ;                  (.debugFillProperties ^{:tag ~'super} this# props-builder#)
                         ;                  (doto props-builder#
                         ;                    ~@(cond-> []
                         ;                        watch
                         ;                        (conj `(.add (foundation/MessageProperty "atom" (pr-str @~watch))))))
                         ;                  nil)
                         (^void ~'reassemble [this#]
                           (.reassemble ^{:tag ~'super} this#)
                           (dp :hello-reassemble-callback (cty/minfo me))
                           (state-set-all me)
                           #_
                           (if-let [^State state (mget (:parent @me) #_ me :fx$state)]
                             (do (dp :REASM-settingimmediatestate (cty/minfo (:parent @me)) (.-mounted state))
                                 (state-set state me))
                             (if-let [^State state (fx-state-nearest (:parent @me) #_ me)]
                               (do
                                 (dp :REASM-SNO-uses-nearest-state (cty/minfo (:parent @me)) state (.-mounted state))
                                 (state-set state me))
                               (dp :REASM-SNO-setting-state-on-utterly-stateless (cty/minfo me)))))
                         ;-- END NEW CODE
                         (~'build [_# ctx]
                           (~fx-class (tiltontec.flutter-mx.core/fx-render ctx (first (tiltontec.model.core/md-kids me)))
                             ~@(let [kvs (for [[k# _#] fx-props]
                                           [(symbol (str "." (name k#)))
                                            `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                               (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro childless-stateful [fx-class fx-props mx-props]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           #_(when-let [init (mget me :initState)]
                               (init this me)))
                         (~'build [_# ctx]
                           (~fx-class
                             ~@(let [kvs (for [[k# _#] fx-props]
                                           [(symbol (str "." (name k#)))
                                            `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                               (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       nil)))

(defmacro prop-param1-childless-stateful [p1-prop-name fx-class fx-props mx-props]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (mget me :initState)]
                             (init this me)))
                         (~'build [_# ctx]
                           (~fx-class (tiltontec.flutter-mx.core/fx-resolve :ico-prop me ctx
                                        (tiltontec.model.core/mget me ~p1-prop-name))
                             ~@(let [kvs (for [[k# _#] (dissoc fx-props p1-prop-name)]
                                           [(symbol (str "." (name k#)))
                                            `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                               (tiltontec.model.core/mget me ~k#))])]
                                 (apply concat kvs)))))))))
       nil)))

(defmacro k1-body-stateful [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.model.core/mget me :initState)]
                             (init this me)))
                         (~'build [_# ctx]
                           (let [bod# (tiltontec.flutter-mx.core/fx-resolve :kid1 me ctx
                                        (first (tiltontec.model.core/md-kids me)))]
                             (~fx-class
                               ;; todo throw error if they specify :body explicitly, for now
                               .body bod#
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#)))
                                              `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                 (tiltontec.model.core/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro k1-home-stateful [fx-class fx-props mx-props & children]
  (let []
    ;(assert (not (contains? fx-props :home)) "k1-home-stateful passed :home param in FX props, but expects :home as first child")
    ;(assert (not (contains? mx-props :home)) "k1-home-stateful sees :home in MX props, but expects :home as first child")
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (reify :extends (m/StatefulWidget
                                     .key (tiltontec.flutter-mx.core/fx-resolve me ctx
                                            (tiltontec.model.core/mget me :key)))
                     (~'createState [_#]
                       (reify :extends w/State
                         (^void ~'initState [this]
                           ;(.initState ~'^super this)
                           (tiltontec.flutter-mx.factory/record-fx$state me this)
                           (when-let [init (tiltontec.model.core/mget me :initState)]
                             ;; this is where widgets can build controllers who vsync
                             (init this me)))
                         (~'build [_# ctx]
                           (let [bod# (tiltontec.flutter-mx.core/fx-resolve :kid1 me ctx
                                        (first (tiltontec.model.core/md-kids me)))]
                             (~fx-class
                               .home bod#
                               ~@(let [kvs (for [[k# _#] fx-props]
                                             [(symbol (str "." (name k#))) ;;k#
                                              `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                                 (tiltontec.model.core/mget me ~k#))])]
                                   (apply concat kvs))))))))))
       (tiltontec.model.core/cFkids ~@children))))

(defmacro prop-param1-childless-stateless [prop fx-class fx-props mx-props]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class (tiltontec.flutter-mx.core/fx-resolve ~prop me ctx
                                (tiltontec.model.core/mget me ~prop))
                     ~@(let [kvs (for [[k# _#] (dissoc fx-props prop)]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                       (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       nil)))

;;; --- kids for builder ------------------------------------------------------

(defmacro  kids-for-builder [fx-class fx-props mx-props & children]
  (let []
    `(tiltontec.flutter-mx.factory/make-fx (new tiltontec.flutter-mx.factory/FXDartWidget)
       ~fx-props
       (assoc ~mx-props
         :fx-class (quote ~fx-class)
         :fx-gen (fn [me ctx]
                   (~fx-class
                     ~@(let [kvs (for [[k# _#] fx-props]
                                   [(symbol (str "." (name k#)))
                                    `(tiltontec.flutter-mx.core/fx-resolve ~k# me ctx
                                       (tiltontec.model.core/mget me ~k#))])]
                         (apply concat kvs)))))
       (tiltontec.model.core/cFkids ~@children))))

;;; -------------------------------------------------------------

(defmacro sized-box+expand-ful [fx-props mx-props & children]
  `(tiltontec.flutter-mx.factory/k1-child-stateful m.SizedBox/expand ~fx-props ~mx-props ~@children))

;;; --- next two not yet confirmed in practice
(defmacro positioned [fx-props mx-props & children]
  `(tiltontec.flutter-mx.factory/k1-child-stateful m/Positioned ~fx-props ~mx-props ~@children))
(defmacro transorm+rotate-ful [fx-props mx-props & children]
  `(tiltontec.flutter-mx.factory/k1-child-stateful m.Transform/rotate ~fx-props ~mx-props ~@children))

