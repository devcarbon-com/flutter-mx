(ns tiltontec.example.x05-fab
  (:require
    ["dart:math" :as math]
    [cljd.flutter.alpha :as f]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.core :as cell :refer [cF cI]]
    [tiltontec.model.core :refer [mget fmuv] :as md]
    [tiltontec.mx-flutter.core :as fx]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]))

(declare fake-item expandable-fab show-action action-button)

(defn make-app []
  (fx/material-app {:title                      "Expandable Fab"
                    :debugShowCheckedModeBanner false}
    {:name :mat-app}
    (fx/scaffold
      {:appBar               (fx/app-bar {:title (fx/text "Expandable FAB")})
       :floatingActionButton (expandable-fab
                               :initial-open? false
                               :distance 112.0
                               :actions [{:title "Create Post" :icon (m/Icon m.Icons/format_size)}
                                         {:title "Upload Photo" :icon (m/Icon m.Icons/insert_photo)}
                                         {:title "Upload Video" :icon (m/Icon m.Icons/videocam)}])}
      (fx/list-view+builder
        {:padding     (m.EdgeInsets/symmetric .vertical 8.0)
         :itemCount   25
         :itemBuilder (fx/->CBAsIs
                        (fn [ctx i] (fake-item (odd? i))))}))))

(declare expanding-action-button
  tap-to-close-fab
  tap-to-open-fab)

(defn expandable-fab [& {:keys [initial-open? distance actions] :or {initial-open? false}}]
  (fx/sized-box+expand-ful
    {}                                                      ;; <= necessary placeholder
    {:name             :fab
     ; --- Dart lifecycle ---------------------------
     :dispose          (fn [this me]
                         (when-let [controller (fx/my-controller)]
                           (.dispose controller)))
     ; --- animation mechanics ----------------------
     :controller       (cF (fx/when-my-state [state]
                             (m/AnimationController
                               .value (if initial-open? 1.0 0.0)
                               .duration  (dart:core/Duration .milliseconds 250)
                               .vsync state)))
     :expand-animation (cF (when-let [c (fx/my-controller)]
                             (m/CurvedAnimation
                               .curve m.Curves/fastOutSlowIn
                               .reverseCurve m.Curves/easeOutQuad
                               .parent c)))
     ; --- behavior -------------------------
     :step             (/ 90.0 (dec (count actions)))
     :open?            (cI initial-open?
                         ;; reactive "observers" are how changed values become app behavior
                         :obs (fn [prop-name me new-value prior-value cell]
                                (when-let [c (fx/my-controller)] ;; not until first render installation
                                  (if new-value
                                    (.forward c)
                                    (.reverse c)))))}
    (fx/stack
      {:alignment    m.Alignment/bottomRight
       :clipBehavior m.Clip/none}
      (tap-to-close-fab me)
      ;; Matrix always flattens children, and discards nils, so we can offer a collection mid-children
      (doall (do
               (map-indexed
                 (fn [i action]
                   (expanding-action-button me
                     :direction-degrees (* i (fmuv :step :fab))
                     :max-distance distance
                     :progress-key :expand-animation
                     :action action))
                 actions)))
      (tap-to-open-fab me))))

(defn expanding-action-button [me & {:keys [action direction-degrees max-distance progress-key]}]
  (fx/animated-builder
    {:animation (mget (md/fasc :fab) :expand-animation)
     :builder   (fx/->CBAsIs
                  ;; "as is"? We need a callback for Flutter itself to call, so this next fn is passed thru as is
                  (fn [ctx child]
                    (let [progress ^m/CurvedAnimation (mget (md/fasc :fab) :expand-animation)
                          offset (m.Offset/fromDirection
                                   (* direction-degrees (/ math/pi 180.00))
                                   (* (.-value progress) max-distance))]
                      ;; N.B! alpha widgets are welcome at leaves of the MX tree...
                      (f/widget
                        (f/nest
                          (m/Positioned
                            .right (+ 4.0 (.-dx offset))
                            .bottom (+ 4.0 (.-dy offset)))
                          (m.Transform/rotate
                            .angle (* (- 1.0 (.-value progress))
                                     math/pi 0.5))
                          child)))))}
    (fx/fade-transition
      {:opacity (mget (md/fasc :fab) :expand-animation)}
      (action-button
        :icon (:icon action)
        :onPressed (fx/cb-with-ctx [me ctx]
                     (fx/->CBAsIs
                       #(show-action ctx action)))))))

(defn show-action [ctx action]
  (m/showDialog
    .context ctx
    .builder (fn [ctx]
               ;; in this rare case talking directly to Flutter we must
               ;; use fx-render to build a ready-to-go Dart object. This
               ;; could be a macro if this comes up a lot,
               (fx/fx-render ctx
                 (fx/alert-dialog
                   {:actions [(m/TextButton
                                .onPressed #(-> ctx m.Navigator/of .pop)
                                .child  (m/Text "CLOSE"))]}
                   {}
                   (fx/text {} {} (:title action)))))))

(defn action-button [& {:keys [onPressed icon]}]
  (fx/material {:shape         (m/CircleBorder)
                :clipBehavior m.Clip/antiAlias
                :color        (fx/cb-with-ctx [me ctx]
                                (-> (m.Theme/of ctx) .-colorScheme .-secondary))
                :elevation    4.0}
    (fx/icon-button
      {:onPressed onPressed
       :icon      icon
       :color     (fx/cb-with-ctx [me ctx]
                    (-> (m.Theme/of ctx) .-colorScheme .-onSecondary))})))

(defn- tap-to-close-fab [par]
  (fx/sized-box {:width  56.0
                 :height 56.0}
    {}
    (fx/center {} {}
      (fx/material {:shape         (m/CircleBorder)
                    :clipBehavior m.Clip/antiAlias
                    :elevation    4.0}
        (fx/ink-well {:onTap (fx/->CBAsIs
                               #(md/mswap! (md/fasc :fab par) :open? not))} {}
          (fx/padding {:padding  (m.EdgeInsets/all 8.0)} {}
            (fx/icon {:icon  m.Icons/close
                      :color (fx/cb-with-ctx [me ctx]
                               (.-primaryColor (m.Theme/of ctx)))} {})))))))

(defn- tap-to-open-fab [par]
  (fx/ignore-pointer
    {:ignoring (mget (md/fasc :fab par) :open?)}
    (fx/animated-container
      {:transformAlignment m.Alignment/center
       :transform          (cF (if (mget (md/fasc :fab par) :open?)
                                 (m.Matrix4/diagonal3Values 0.7 0.7 1.0)
                                 (m.Matrix4/diagonal3Values 1.0 1.0 1.0)))
       :duration            (dart:core/Duration .milliseconds 250)
       :curve               (m/Interval 0.0 0.5 .curve m.Curves/easeOut)}
      (fx/animated-opacity
        {:opacity  (cF (if (mget (md/fasc :fab par) :open?)
                         0.0 1.0))
         :curve     (m/Interval 0.25 1.0 .curve m.Curves/easeInOut)
         :duration  (dart:core/Duration .milliseconds 250)}
        (fx/floating-action-button
          {:onPressed (fx/->CBAsIs
                        #(md/mswap! (md/fasc :fab par) :open? not))}
          (fx/icon {:icon m.Icons/create}))))))

(defn fake-item [is-big?]
  (m/Container
    .margin  (m.EdgeInsets/symmetric .vertical 8.0 .horizontal 24.0)
    .height (if is-big? 128.0 36.0)
    .decoration (m/BoxDecoration
                  .borderRadius  (m.BorderRadius/all (m.Radius/circular 8.0))
                  .color (.-shade300 m.Colors/cyan))))

#_;; this below is the above converted to "apply". The Dart equivalent works, but not this
        (dart:core.Function/apply m/Container nil
          ^#/(Map Symbol dynamic) {:margin  (m.EdgeInsets/symmetric :vertical 8.0 :horizontal 24.0)
                                   :height (if is-big? 128.0 36.0)
                                   :decoration
                                   (m/BoxDecoration
                                     :borderRadius  (m.BorderRadius/all (m.Radius/circular 8.0))
                                     :color (.-shade300 Colors/pink))})
